// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

model Post {
    id       String    @id @default(cuid())
    content  String?
    image    String?
    comments Comment[]
    likes    Like[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([content])
    @@index([createdById])
}

model Comment {
    id        String   @id @default(cuid())
    comment   String
    createdAt DateTime @default(now())

    postId String
    post   Post   @relation(fields: [postId], references: [id])
    userId String
    user   User   @relation(fields: [userId], references: [id])

    @@index([postId])
    @@index([userId])
}

model Like {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    postId String
    post   Post   @relation(fields: [postId], references: [id])
    userId String
    user   User   @relation(fields: [userId], references: [id])

    @@index([userId])
    @@index([postId])
}

model Message {
    id        String   @id @default(uuid())
    message   String
    read      Boolean  @default(false)
    createdAt DateTime @default(now())

    senderId   String
    sender     User   @relation(name: "senderId", fields: [senderId], references: [id])
    receiverId String
    receiver   User   @relation(name: "receiverId", fields: [receiverId], references: [id])

    @@index([receiverId])
    @@index([senderId])
}

model Notification {
    id          String   @id @default(uuid())
    type        String // Consider using an ENUM type if your database supports it
    referenceId String // Generic reference ID, could be postId, userId, etc.
    read        Boolean  @default(false)
    createdAt   DateTime @default(now())

    userId String
    user   User   @relation(fields: [userId], references: [id])

    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id               String         @id @default(cuid())
    name             String?
    username         String?        @unique
    email            String         @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    posts            Post[]
    bio              String?
    comments         Comment[]
    likes            Like[]
    sentMessages     Message[]      @relation("senderId")
    receivedMessages Message[]      @relation("receiverId")
    notifications    Notification[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([id])
    @@index([username])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
